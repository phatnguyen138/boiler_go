// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: example.sql

package db

import (
	"context"
)

const addExample = `-- name: AddExample :one
INSERT INTO examples (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) AddExample(ctx context.Context, name string) (Example, error) {
	row := q.db.QueryRowContext(ctx, addExample, name)
	var i Example
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getExample = `-- name: GetExample :one
SELECT id, name from examples
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetExample(ctx context.Context, id int32) (Example, error) {
	row := q.db.QueryRowContext(ctx, getExample, id)
	var i Example
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listExamples = `-- name: ListExamples :many
SELECT id, name from examples
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListExamplesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListExamples(ctx context.Context, arg ListExamplesParams) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, listExamples, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Example
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
